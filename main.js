(()=>{"use strict";const t=document.querySelector(".container"),e=new class{constructor(t){this.container=t}createCollapse(){this.bindToDOM()}static get markup(){return'\n    <div class="collapse">\n        <div class="button__block">\n          <button class="start__btn">Collapse</button>\n        </div>\n        <div class="widget__body">\n          <p class="widget__text"></p>\n        </div>\n    </div>'}bindToDOM(){this.container.insertAdjacentHTML("afterbegin",this.constructor.markup),document.querySelector(".widget__text").textContent="Transition allows you to define a transition state between two states of an element. Different states can be defined using pseudo-classes such as :hover or :active or set dynamically using JavaScript."}}(t),n=new class{constructor(t){this.collapse=t}init(){this.container=document.querySelector(".container"),this.collapse.createCollapse(),this.addSubscribe(this.container)}addSubscribe(t){t.addEventListener("click",this.onClickStart.bind(this))}onClickStart(t){t.target.classList.contains("start__btn")&&(t.preventDefault(),this.widget=document.querySelector(".widget__body"),this.widget.classList.toggle("active"))}}(e);n.init();new class{constructor(t){this.parentEl=t}init(){this.bindToDOM(),this.addSubscribe(document.querySelector(".chat__widget"))}addSubscribe(t){t.addEventListener("click",this.onClickCloseForm.bind(this)),t.addEventListener("click",this.onClickStartChat.bind(this))}static get markup(){return'\n        <div class="chat__widget">\n        \n          <div class="form-wrapper">\n          <button class="close__form">X</button>\n            <form class="form__feedback" action="#">\n              <div class="form__header">\n                <h3 class="form__title">Напишите нам!</h3>\n                \n              </div>\n              <textarea class="panel__feedback"></textarea>\n              <button class="send__feedback">Отправить</button>\n            </form>\n          </div>\n            <div class="chat__btn-block">\n              <button class="form__btn"></button>\n        </div>'}bindToDOM(){this.parentEl.insertAdjacentHTML("afterend",this.constructor.markup)}onClickCloseForm(t){t.target.classList.contains("close__form")&&(t.preventDefault(),document.querySelector(".form-wrapper").classList.remove("active__chat"),document.querySelector(".form__btn").classList.remove("active__btn"))}onClickStartChat(t){t.target.classList.contains("form__btn")&&(t.preventDefault(),document.querySelector(".form__btn").classList.add("active__btn"),document.querySelector(".form-wrapper").classList.add("active__chat"))}}(t).init();new class{constructor(t){this.parentEl=t,this.heart=null}init(){this.bindToDOM(),this.addSubscribe(document.querySelector(".liker__widget"))}addSubscribe(t){t.addEventListener("click",this.onClickLikerBtn.bind(this))}static get markup(){return'\n            <div class="liker__widget">\n                <div class="btn__block">\n                  <button class="liker__btn">Like</button>\n            </div>'}bindToDOM(){this.parentEl.insertAdjacentHTML("beforeend",this.constructor.markup)}onClickLikerBtn(t){t.target.classList.contains("liker__btn")&&(t.preventDefault(),this.createHeart(),this.heart.addEventListener("animationend",(()=>{this.removeHeartImg()})))}createHeart(){this.heart=document.createElement("div"),this.heart.classList.add("heart-wrapper");const t=document.createElement("span");t.classList.add("heart__icon"),this.heart.append(t),document.querySelector(".liker__widget").append(this.heart),this.addTrackHeart(this.heart)}removeHeartImg(){Array.from(document.querySelectorAll(".heart-wrapper")).forEach((t=>{t.remove()})),this.heart=null}static arrayRandElem(t){return t[Math.floor(Math.random()*t.length)]}addTrackHeart(t){const e=this.constructor.arrayRandElem(["one","two","three","four"]);t.classList.add(e)}}(t).init()})();